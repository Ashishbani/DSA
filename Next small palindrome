//Not completely optimised code
import java.util.* ;
import java.io.*; 
public class Solution {
	public static String nextLargestPalindrome(String number, int length) {
		// Write your code here.
		if (length % 2 != 0) {
			int middleNum = number.charAt(length/2) - '0';
			if (middleNum != 9) {
				return getModifiedString(number, middleNum, length, true);
			} else {
				int n = Integer.parseInt(number.substring(0, (length /2))) + 1;
				String s1 = Integer.toString(n);
				StringBuilder s2 = new StringBuilder(s1).reverse();
				String x = s1 + s2.toString();
				if (x.length() < number.length()) {
					return s1 + '0' +s2.toString();
				}
				return x;
			}
		} else {
			int start = Integer.parseInt(number.substring(0, length/2));
			return getModifiedString(number, start, length, false);
		}
	}

	public static String getModifiedString(String inpuString, int number, int length, boolean isOdd) {
		String firstHalf = inpuString.substring(0, (length /2));
		StringBuilder reverseHalf = new StringBuilder(firstHalf).reverse();
		String modString = isOdd ? firstHalf + Integer.toString(number) + reverseHalf.toString() : firstHalf + reverseHalf.toString();
		if (Long.parseLong(modString) <= Long.parseLong(inpuString)) {
			number++;
		}
		if (isOdd) {
			return firstHalf + Integer.toString(number) + reverseHalf.toString();
		} else {
			String s1 = Integer.toString(number);
			StringBuilder s2 = new StringBuilder(s1).reverse();
			return s1 + s2.toString();
		}
	}
}


//Another optimised code but having failing test cases

import java.util.* ;
import java.io.*;
import java.math.BigInteger; 
public class Solution {
	public static String nextLargestPalindrome(String number, int length) {
		// Write your code here.
        StringBuilder s1 = new StringBuilder();
        int middle = -1;
        String string = "";
        if (number.length() == 1) {
            int num = Integer.parseInt(number) + 1;
            return String.valueOf(num);
        }
        if (length % 2 == 0) {
            s1.append(number.substring(0, length/2));
            string = s1.toString() + s1.reverse().toString();
        } else {
            s1.append(number.substring(0, length/2));
            middle = number.charAt(length/2) - '0';
            string = s1.toString()+Integer.toString(middle)+s1.reverse().toString();
        }
        int result = number.compareTo(string);
        if (result >= 0) {
            BigInteger b1 = new BigInteger(s1.reverse().toString());
            StringBuilder s2 = new StringBuilder();
            if (length % 2 == 0) {
                b1 = b1.add(BigInteger.ONE);
                s2.append(b1.toString());
                return b1.toString() + s2.reverse().toString();
            } else {
                if (middle == 9) {
                    b1 = b1.add(BigInteger.ONE);
                    s2.append(b1.toString());
                    if (b1.toString().length() > s1.length()) {
                        return b1.toString() + s2.reverse().toString();
                    } else {
                        return b1.toString() + "0" + s2.reverse().toString();
                    }
                } else {
                    s2.append(b1.toString());
                    return b1.toString() + Integer.toString(middle + 1) + s2.reverse().toString();
                }
            }
        } else {
            return string;
        }
        
	}
}
